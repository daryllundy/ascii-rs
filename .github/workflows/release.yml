name: Release

on:
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  release:
    name: Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install ALSA development libraries (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libasound2-dev

      - name: Build
        run: cargo build --release --locked

      - name: Prepare release assets
        id: prep
        shell: bash
        run: |
          VERSION=${{ github.ref_name }}
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            VERSION="nightly"
          fi

          ASSET_PATH=""
          ASSET_NAME=""
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            src="target/release/ascii-rs.exe"
            ASSET_NAME="ascii-rs-windows-${VERSION}.exe"
            mv "${src}" "${ASSET_NAME}"
            ASSET_PATH="${ASSET_NAME}"
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            src="target/release/ascii-rs"
            ASSET_NAME="ascii-rs-linux-${VERSION}"
            mv "${src}" "${ASSET_NAME}"
            ASSET_PATH="${ASSET_NAME}"
          else
            src="target/release/ascii-rs"
            ASSET_NAME="ascii-rs-macos-${VERSION}"
            mv "${src}" "${ASSET_NAME}"
            ASSET_PATH="${ASSET_NAME}"
          fi
          echo "ASSET_PATH=${ASSET_PATH}" >> $GITHUB_OUTPUT
          echo "ASSET_NAME=${ASSET_NAME}" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prep.outputs.ASSET_NAME }}
          path: ${{ steps.prep.outputs.ASSET_PATH }}

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/v') }}
          files: artifacts/*/*
